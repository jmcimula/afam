<?xml version="1.0" encoding="utf-8" standalone="yes" ?>

<feed xmlns="http://www.w3.org/2005/Atom">

  <id>https://addhen.github.io/afam</id>
  <updated>2016-06-27T09:50:18&#43;09:00</updated>
  <link href="https://addhen.github.io/afam/tags/database/index.xml" rel="self" />
  <category term="" />
  <icon>https://addhen.github.io/afamimages/template/favicon.png</icon>
  <logo>https://addhen.github.io/afamimages/template/logo-512.png</logo>
  <rights>Copyright &#169; AFAM</rights>  
  <title>AFAM</title>
  <subtitle>Website for Addhen Limited. Highlighting its portfolio and service offerings.</subtitle>

  <entry>
    <id>https://addhen.github.io/afam/news/persisting-with-cupboard/</id>
    <title>Persisting Data Objects With Cupboard</title>
    <updated>2016-06-27T09:50:18&#43;09:00</updated>
    <content type="html"><![CDATA[
      <p>There are serveral contenders when it comes to persisting data on Android.
At addhen, our favourite is <a href="https://bitbucket.org/littlerobots/cupboard/wiki/Home">cupboard</a>. It&rsquo;s a lightweight data storage for Android. At first, it seems like an <a href="https://en.wikipedia.org/wiki/Object-relational_mapping">ORM</a> but it isn&rsquo;t, as it doesn&rsquo;t manage table relationships and all that fancy features that comes with it. It gives you a neat API to store and retrieve data objects on Android.</p>

<p>We structure our database tables around the <code>JSON</code> response we get from API calls. At times we&rsquo;re tempted to create tables just to conform to the structure of the <code>JSON</code> string. Hence sometimes we wished <code>cupboard</code> could manage table relationships. But it does give you the flexibility to do all of that. It just means you will have to write a bit of code to achieve that.</p>

<p>In most cases when we look at the structure of our <code>JSON</code> string, we look for ways to elimenate the need to create extra tables. To achieve that, we try to store some part of the <code>JSON</code> string in it serialized format. Then deserialize it upon retrieval. Cupboard provides you with the necessary mechanism to acheive all that. We&rsquo;re going to share with you how we approach this.</p>

<p>So let&rsquo;s say we have this <code>JSON</code> string</p>


<pre class="prettyprint linenums"><code class="language-java">[
  {
    &#34;id&#34;: 1,
    &#34;name&#34;: &#34;Apples&#34;,
    &#34;price&#34;: 10,
    &#34;note&#34;: &#34;I usually buy them from the convenient store.&#34;,
    &#34;expiry_date&#34;: &#34;28-07-2017&#34;,
    &#34;category&#34;: {
      &#34;id&#34;: 9,
      &#34;url&#34;: &#34;http://www.api.data.com/categories/9&#34;
    },
    &#34;quantity&#34;: {
      &#34;initial&#34;: &#34;10&#34;,
      &#34;remaining&#34;: &#34;5&#34;,
      &#34;unit&#34;: &#34;None&#34;,
      &#34;reorder&#34;: 3
    }
  },
  {
    &#34;id&#34;: 2,
    &#34;name&#34;: &#34;Arugula&#34;,
    &#34;price&#34;: 200,
    &#34;note&#34;: &#34;I got them from the amazon jp store&#34;,
    &#34;expiry_date&#34;: &#34;16-07-2018&#34;,
    &#34;category&#34;: {
      &#34;id&#34;: 9,
      &#34;url&#34;: &#34;http://www.api.data.com/categories/9&#34;
    },
    &#34;quantity&#34;: {
      &#34;initial&#34;: &#34;6&#34;,
      &#34;remaining&#34;: &#34;2&#34;,
      &#34;unit&#34;: &#34;box&#34;,
      &#34;reorder&#34;: 3
    }
  }
]
</code></pre>



<p>The <a href="https://en.wikipedia.org/wiki/Plain_Old_Java_Object">POJO</a> for this will be</p>


<pre class="prettyprint linenums"><code class="language-java">public class InventoryEntity extends Data {

    public String name;

    public float price;

    public String note;

    public CategoryEntity category;

    public Quantity quantity;

    public Date expiryDate;

    public InventoryEntity() {
        // Do nothing
    }

    public InventoryEntity(Long id, String name, float price, Quantity quantity,
            String note, CategoryEntity category, Date expiryDate) {
        this._id = id;
        this.name = name;
        this.price = price;
        this.quantity = quantity;
        this.note = note;
        this.category = category;
        this.expiryDate = (Date) expiryDate.clone();
    }

    public static class Quantity {

        public int initial;

        public int remaining;

        public int reorder;

        public String unit;

        public Quantity(int initial, int remaining, int reorder, String unit) {
            this.initial = initial;
            this.remaining = remaining;
            this.reorder = reorder;
            this.unit = unit;
        }
    }
}
</code></pre>



<p>Since <code>cupboard</code> stores objects into the database, this <code>POJO</code> should just work right? But no, it doesn&rsquo;t. It wouldn&rsquo;t know how to handle the <code>Quantity</code> property as it&rsquo;s a subclass. In a regular database relationship, you could create a table to hold the <code>Quantity</code> class but you can eliminate that, if you could just store that part as a <code>JSON</code> string. This alleviates the pain of managing table relationships.</p>

<p>We utilize cupboard&rsquo;s converters to achieve that. In that when saving the object, we intercept the process and keep the <code>Quantity</code> property in this case, as a regular <code>JSON</code> string. We create a custom <code>FieldConverter</code> and use it to check if cupboard is about to process the <code>Quantity</code> field, then save the <code>JSON</code> string instead of the deserialized format.</p>

<p>First, create a generic field converter using <code>GSON</code></p>


<pre class="prettyprint linenums"><code class="language-java">public class GsonFieldConverter&lt;T&gt; implements FieldConverter&lt;T&gt; {

    private final Gson mGson;

    private final Type mType;

    public GsonFieldConverter(Gson gson, Type type) {
        mGson = gson;
        mType = type;
    }

    @Override
    public T fromCursorValue(Cursor cursor, int columnIndex) {
    	  // Convert from JSON string to POJO
        return mGson.fromJson(cursor.getString(columnIndex), mType);
    }

    @Override
    public void toContentValue(T value, String key, ContentValues values) {
    	 // Convert from POJO to JSON string
        values.put(key, mGson.toJson(value));
    }

    @Override
    public EntityConverter.ColumnType getColumnType() {
        return EntityConverter.ColumnType.TEXT;
    }
}
</code></pre>



<p>Second, by some <a href="https://docs.oracle.com/javase/tutorial/reflect/">Reflection</a> magic, cupboard allows you to figure out which field it&rsquo;s processing, allowing you to process that field before it stores or retrieves it from the database.</p>


<pre class="prettyprint linenums"><code class="language-java">public class InventoryEntityConverterFactory extends ReflectiveEntityConverter&lt;InventoryEntity&gt; {

    /**
     * Default constructor
     *
     * @param cupboard The {@link Cupboard} object
     */
    public InventoryEntityConverterFactory(Cupboard cupboard) {
        super(cupboard, InventoryEntity.class);
    }

    @Override
    protected FieldConverter&lt;?&gt; getFieldConverter(Field field) {
        if (&#34;quantity&#34;.equals(field.getName())) {
        	  // Use the field converter to deserilize/serialize the quantity field
            return new GsonFieldConverter&lt;&gt;(new Gson(),
                    new TypeToken&lt;InventoryEntity.Quantity&gt;() {
                    }.getType());
        }
        return super.getFieldConverter(field);
    }
}  
</code></pre>



<p>Third, we have to initialize this when registering the entities with cupboard otherwise all this implementation won&rsquo;t make any sense to it.</p>


<pre class="prettyprint linenums"><code class="language-java">private static final Class[] ENTITIES = new Class[]{
    InventoryEntity.class, CategoryEntity.class,
};

static {
    EntityConverterFactory factory = new EntityConverterFactory() {

        @Override
        public &lt;T&gt; EntityConverter&lt;T&gt; create(Cupboard cupboard, Class&lt;T&gt; type) {
            if (type == InventoryEntity.class) {
                return (EntityConverter&lt;T&gt;) new InventoryEntityConverterFactory(cupboard);
             }
             return null;
        }
    };

    CupboardFactory.setCupboard(new CupboardBuilder()
                .registerEntityConverterFactory(factory).useAnnotations().build());
    // Register our entities
    for (Class&lt;?&gt; clazz : ENTITIES) {
        cupboard().register(clazz);
    }
}
</code></pre>



<p>To learn more about cupboard, check its <a href="https://bitbucket.org/littlerobots/cupboard/wiki/Home">wiki</a>. It has lots of how-tos to get you started.</p>

    ]]></content>
    <link rel="alternate" href="https://addhen.github.io/afam/news/persisting-with-cupboard/" />
  </entry>
  <entry>
    <id>https://addhen.github.io/afam/news/storing-objects-with-shared-preferences/</id>
    <title>Storing Objects With Shared Preferences</title>
    <updated>2016-05-16T14:02:21&#43;09:00</updated>
    <content type="html"><![CDATA[
      <p>As you know <a href="http://developer.android.com/reference/android/content/SharedPreferences.html">SharedPreferences</a> allows you to store key-value pairs of primitive data types in an XML and provides you with a decent API for storing/retrieving their values. It&rsquo;s mostly used to persist values from Preferences/Settings screens.</p>

<p>In a recent project, we wanted to make use of the <strong>Shared Preferences</strong> framework to store an object&rsquo;s properties more so for convenience. Usually we&rsquo;ll store these in an SQLite database but with this use case we thought it was an overkill to do that. Instead, we leveraged on <strong>JSON</strong> and the <a href="http://developer.android.com/reference/android/content/SharedPreferences.html">SharedPreferences</a> class.</p>

<p>The design in it basic form: We serialize the object into a JSON string upon storing it and then store the regular string. Upon retrieving it, we deserialize the JSON string back into the object. Mind you this operation can be costly when the object being operated on has huge properties. So if you&rsquo;re planning on using this technique for large objects, it would be better to make use of the other storage options provided by the Android framework.</p>

<p>The design in it detailed form: We designed a simpile persistent storage with <a href="https://github.com/google/gson">GSON</a>, the underlining serialization mechanisim and <a href="http://developer.android.com/guide/topics/data/data-storage.html#pref">Shared Preferences</a>, the storage engine. We made it in such a way that you can use which ever storage or serialization engine you prefer.</p>

<p>We provided two interfaces, one for the Serialization mechanism and another for the Storage engine. To share some code, here is the interface for implementing the serialization mechanism.</p>


<pre class="prettyprint linenums"><code class="language-java">public interface SerializationMechanism&lt;T&gt; {

    /**
     * Serializes a T to a JSON string
     *
     * @param entity The type entity to be serialized
     * @return String The serialized object into a JSON string
     */
    String serialize(T entity);

    /**
     * Deserializes a JSON string to it&#39;s typed entity
     *
     * @param serializedEntity The serialized object in a JSON format
     * @return A type entity
     */
    T deserialize(String serializedEntity);
}
</code></pre>



<p>And the interface for the storage engine.</p>


<pre class="prettyprint linenums"><code class="language-java">
public interface StorageMechanism&lt;T&gt; {

    /**
     * Gets an {@link rx.Observable} which will emit a list of {@link EntityType}.
     */
    Observable&lt;List&lt;EntityType&gt;&gt; get();

    /**
     * Gets an {@link rx.Observable} which will emit a {@link EntityType}.
     */
    Observable&lt;EntityType&gt; get(String key);

    /**
     * Puts an element into storage
     *
     * @param The unique key to identify this entity type
     * @param entityType Element to insert into storage.
     *
     * @return  The stored entity type
     */
    Observable&lt;EntityType&gt; put(String key, EntityType entityType);

    /**
     * Deletes a particular entity type
     */
    Observable&lt;Boolean&gt; delete(String key);

    /**
     * Delete all persisted elements
     */
    Observable&lt;Boolean&gt; deleteAll();
}
</code></pre>



<p>Now let&rsquo;s look at their respective implementations.</p>

<p>The serialization mechanism:</p>


<pre class="prettyprint linenums"><code class="language-java">public class GsonSerializationMechanism implements SerializationMechanism&lt;EntityType&gt; {

    private final Gson mGson = new Gson();

    private final Type mTypeToken = new TypeToken&lt;List&lt;EntityType&gt;&gt;() {}.getType();

    public String serialize(EntityType entityType) {
        return mGson.toJson(entityType, mTypeToken);
    }
    
    public EntityType deserialize(String jsonString) {
        return mGson.fromJson(jsonString, mTypeToken);
    }
}
</code></pre>



<p>The storage mechanism implementation: This is a <a href="https://github.com/ReactiveX/RxJava">RxJava</a> based implementation. You will noticed most of the functions are returning an Observable. You can do away with the RxJava implementation if you don&rsquo;t
find that useful for your use case.</p>


<pre class="prettyprint linenums"><code class="language-java">public class SharedPreferenceStorageMechanism implements StorageMechanism&lt;EntityType&gt; {

    private final SharedPreferences mSharedPreferences;

    private final SerializationMechanism mSerializationMechanism;

    public SharedPreferenceStorageMechanism(SharedPreferences sharedPreferences, 
        StorageMechanism serializationMechanism) {
        mSharedPreferences = sharedPreferences;
        mSerializationMechanism = serializationMechanism;
    }

    @Override
    public Observable&lt;EntityType&gt; put(@NonNull String key, @NonNull EntityType entityType) {
        return Observable.create(subscriber -&gt; {
            mSharedPreferences.edit().putString(key,mSerializationStrategy.serialize(entityType)).apply();
            subscriber.onNext(entityType);
            subscriber.onCompleted();
        });
    }

    @Override
    public Observable&lt;Boolean&gt; delete(@NonNull String key) {
        return Observable.defer(() -&gt; {
        if (TextUtils.isEmpty(key)) {
            return Observable.just(Boolean.FALSE);
        }
        mSharedPreferences.edit().remove(key).apply();
            return Observable.just(Boolean.TRUE);
       });
    }

    @Override
    public Observable&lt;Boolean&gt; deleteAll() {
        return Observable.defer(() -&gt; {
            mSharedPreferences.edit().clear().apply();
            return Observable.just(Boolean.TRUE);
        });
    }

    @Override
    public Observable&lt;List&lt;EntityType&gt;&gt; get() {
        return Observable.create(subscriber -&gt; {
            Map&lt;String, String&gt; savedTypes = (Map&lt;String, String&gt;) mSharedPreferences
                    .getAll();
            List&lt;EntityType&gt; entitiesTypes = new ArrayList&lt;EntityType&gt;();
            for (Map.Entry entry : savedTypes.entrySet()) {
                entitiesTypes.add(mSerializationStrategy.deserialize((String) entry.getValue()));
            }
            subscriber.onNext(entitiesTypes);
            subscriber.onCompleted();
        });
    }

    @Override
    public Observable&lt;EntityType&gt; get(String key) {
        return Observable.create(subscriber -&gt; {
            EntityType entityType = getStored(key);
            if (entityType != null) {
                subscriber.onNext(entityType);
                subscriber.onCompleted();
            } else {
                subscriber.onError(new NotFoundException());
            }
        });
    }

    private EntityType getStored(String key) {
        final String jsonString = mSharedPreferences.getString(key, null);
        return mSerializationStrategy.deserialize(jsonString);
    }
}
</code></pre>



<p>This so far has been working greatly in our current use case. Hope you will find this useful in your projects.</p>

    ]]></content>
    <link rel="alternate" href="https://addhen.github.io/afam/news/storing-objects-with-shared-preferences/" />
  </entry>
</feed>